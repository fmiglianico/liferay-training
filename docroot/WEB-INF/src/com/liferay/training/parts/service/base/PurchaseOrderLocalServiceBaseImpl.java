/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.parts.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.training.parts.model.PurchaseOrder;
import com.liferay.training.parts.service.ManufacturerLocalService;
import com.liferay.training.parts.service.ManufacturerService;
import com.liferay.training.parts.service.PartLocalService;
import com.liferay.training.parts.service.PurchaseOrderLocalService;
import com.liferay.training.parts.service.persistence.ManufacturerPersistence;
import com.liferay.training.parts.service.persistence.PartPersistence;
import com.liferay.training.parts.service.persistence.PurchaseOrderFinder;
import com.liferay.training.parts.service.persistence.PurchaseOrderPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the purchase order local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.training.parts.service.impl.PurchaseOrderLocalServiceImpl}.
 * </p>
 *
 * @author Joe Bloggs
 * @see com.liferay.training.parts.service.impl.PurchaseOrderLocalServiceImpl
 * @see com.liferay.training.parts.service.PurchaseOrderLocalServiceUtil
 * @generated
 */
public abstract class PurchaseOrderLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements PurchaseOrderLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.training.parts.service.PurchaseOrderLocalServiceUtil} to access the purchase order local service.
	 */

	/**
	 * Adds the purchase order to the database. Also notifies the appropriate model listeners.
	 *
	 * @param purchaseOrder the purchase order
	 * @return the purchase order that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public PurchaseOrder addPurchaseOrder(PurchaseOrder purchaseOrder)
		throws SystemException {
		purchaseOrder.setNew(true);

		return purchaseOrderPersistence.update(purchaseOrder, false);
	}

	/**
	 * Creates a new purchase order with the primary key. Does not add the purchase order to the database.
	 *
	 * @param orderId the primary key for the new purchase order
	 * @return the new purchase order
	 */
	public PurchaseOrder createPurchaseOrder(long orderId) {
		return purchaseOrderPersistence.create(orderId);
	}

	/**
	 * Deletes the purchase order with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param orderId the primary key of the purchase order
	 * @return the purchase order that was removed
	 * @throws PortalException if a purchase order with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public PurchaseOrder deletePurchaseOrder(long orderId)
		throws PortalException, SystemException {
		return purchaseOrderPersistence.remove(orderId);
	}

	/**
	 * Deletes the purchase order from the database. Also notifies the appropriate model listeners.
	 *
	 * @param purchaseOrder the purchase order
	 * @return the purchase order that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	public PurchaseOrder deletePurchaseOrder(PurchaseOrder purchaseOrder)
		throws SystemException {
		return purchaseOrderPersistence.remove(purchaseOrder);
	}

	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(PurchaseOrder.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return purchaseOrderPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return purchaseOrderPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return purchaseOrderPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return purchaseOrderPersistence.countWithDynamicQuery(dynamicQuery);
	}

	public PurchaseOrder fetchPurchaseOrder(long orderId)
		throws SystemException {
		return purchaseOrderPersistence.fetchByPrimaryKey(orderId);
	}

	/**
	 * Returns the purchase order with the primary key.
	 *
	 * @param orderId the primary key of the purchase order
	 * @return the purchase order
	 * @throws PortalException if a purchase order with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public PurchaseOrder getPurchaseOrder(long orderId)
		throws PortalException, SystemException {
		return purchaseOrderPersistence.findByPrimaryKey(orderId);
	}

	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return purchaseOrderPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the purchase orders.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of purchase orders
	 * @param end the upper bound of the range of purchase orders (not inclusive)
	 * @return the range of purchase orders
	 * @throws SystemException if a system exception occurred
	 */
	public List<PurchaseOrder> getPurchaseOrders(int start, int end)
		throws SystemException {
		return purchaseOrderPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of purchase orders.
	 *
	 * @return the number of purchase orders
	 * @throws SystemException if a system exception occurred
	 */
	public int getPurchaseOrdersCount() throws SystemException {
		return purchaseOrderPersistence.countAll();
	}

	/**
	 * Updates the purchase order in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param purchaseOrder the purchase order
	 * @return the purchase order that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public PurchaseOrder updatePurchaseOrder(PurchaseOrder purchaseOrder)
		throws SystemException {
		return updatePurchaseOrder(purchaseOrder, true);
	}

	/**
	 * Updates the purchase order in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param purchaseOrder the purchase order
	 * @param merge whether to merge the purchase order with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the purchase order that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	public PurchaseOrder updatePurchaseOrder(PurchaseOrder purchaseOrder,
		boolean merge) throws SystemException {
		purchaseOrder.setNew(false);

		return purchaseOrderPersistence.update(purchaseOrder, merge);
	}

	/**
	 * Returns the manufacturer local service.
	 *
	 * @return the manufacturer local service
	 */
	public ManufacturerLocalService getManufacturerLocalService() {
		return manufacturerLocalService;
	}

	/**
	 * Sets the manufacturer local service.
	 *
	 * @param manufacturerLocalService the manufacturer local service
	 */
	public void setManufacturerLocalService(
		ManufacturerLocalService manufacturerLocalService) {
		this.manufacturerLocalService = manufacturerLocalService;
	}

	/**
	 * Returns the manufacturer remote service.
	 *
	 * @return the manufacturer remote service
	 */
	public ManufacturerService getManufacturerService() {
		return manufacturerService;
	}

	/**
	 * Sets the manufacturer remote service.
	 *
	 * @param manufacturerService the manufacturer remote service
	 */
	public void setManufacturerService(ManufacturerService manufacturerService) {
		this.manufacturerService = manufacturerService;
	}

	/**
	 * Returns the manufacturer persistence.
	 *
	 * @return the manufacturer persistence
	 */
	public ManufacturerPersistence getManufacturerPersistence() {
		return manufacturerPersistence;
	}

	/**
	 * Sets the manufacturer persistence.
	 *
	 * @param manufacturerPersistence the manufacturer persistence
	 */
	public void setManufacturerPersistence(
		ManufacturerPersistence manufacturerPersistence) {
		this.manufacturerPersistence = manufacturerPersistence;
	}

	/**
	 * Returns the part local service.
	 *
	 * @return the part local service
	 */
	public PartLocalService getPartLocalService() {
		return partLocalService;
	}

	/**
	 * Sets the part local service.
	 *
	 * @param partLocalService the part local service
	 */
	public void setPartLocalService(PartLocalService partLocalService) {
		this.partLocalService = partLocalService;
	}

	/**
	 * Returns the part persistence.
	 *
	 * @return the part persistence
	 */
	public PartPersistence getPartPersistence() {
		return partPersistence;
	}

	/**
	 * Sets the part persistence.
	 *
	 * @param partPersistence the part persistence
	 */
	public void setPartPersistence(PartPersistence partPersistence) {
		this.partPersistence = partPersistence;
	}

	/**
	 * Returns the purchase order local service.
	 *
	 * @return the purchase order local service
	 */
	public PurchaseOrderLocalService getPurchaseOrderLocalService() {
		return purchaseOrderLocalService;
	}

	/**
	 * Sets the purchase order local service.
	 *
	 * @param purchaseOrderLocalService the purchase order local service
	 */
	public void setPurchaseOrderLocalService(
		PurchaseOrderLocalService purchaseOrderLocalService) {
		this.purchaseOrderLocalService = purchaseOrderLocalService;
	}

	/**
	 * Returns the purchase order persistence.
	 *
	 * @return the purchase order persistence
	 */
	public PurchaseOrderPersistence getPurchaseOrderPersistence() {
		return purchaseOrderPersistence;
	}

	/**
	 * Sets the purchase order persistence.
	 *
	 * @param purchaseOrderPersistence the purchase order persistence
	 */
	public void setPurchaseOrderPersistence(
		PurchaseOrderPersistence purchaseOrderPersistence) {
		this.purchaseOrderPersistence = purchaseOrderPersistence;
	}

	/**
	 * Returns the purchase order finder.
	 *
	 * @return the purchase order finder
	 */
	public PurchaseOrderFinder getPurchaseOrderFinder() {
		return purchaseOrderFinder;
	}

	/**
	 * Sets the purchase order finder.
	 *
	 * @param purchaseOrderFinder the purchase order finder
	 */
	public void setPurchaseOrderFinder(PurchaseOrderFinder purchaseOrderFinder) {
		this.purchaseOrderFinder = purchaseOrderFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.training.parts.model.PurchaseOrder",
			purchaseOrderLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.training.parts.model.PurchaseOrder");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return PurchaseOrder.class;
	}

	protected String getModelClassName() {
		return PurchaseOrder.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = purchaseOrderPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = ManufacturerLocalService.class)
	protected ManufacturerLocalService manufacturerLocalService;
	@BeanReference(type = ManufacturerService.class)
	protected ManufacturerService manufacturerService;
	@BeanReference(type = ManufacturerPersistence.class)
	protected ManufacturerPersistence manufacturerPersistence;
	@BeanReference(type = PartLocalService.class)
	protected PartLocalService partLocalService;
	@BeanReference(type = PartPersistence.class)
	protected PartPersistence partPersistence;
	@BeanReference(type = PurchaseOrderLocalService.class)
	protected PurchaseOrderLocalService purchaseOrderLocalService;
	@BeanReference(type = PurchaseOrderPersistence.class)
	protected PurchaseOrderPersistence purchaseOrderPersistence;
	@BeanReference(type = PurchaseOrderFinder.class)
	protected PurchaseOrderFinder purchaseOrderFinder;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private PurchaseOrderLocalServiceClpInvoker _clpInvoker = new PurchaseOrderLocalServiceClpInvoker();
}