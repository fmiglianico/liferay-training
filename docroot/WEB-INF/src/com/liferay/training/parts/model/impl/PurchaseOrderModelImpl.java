/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.parts.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.training.parts.model.PurchaseOrder;
import com.liferay.training.parts.model.PurchaseOrderModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PurchaseOrder service. Represents a row in the &quot;Inventory_PurchaseOrder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.training.parts.model.PurchaseOrderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PurchaseOrderImpl}.
 * </p>
 *
 * @author Joe Bloggs
 * @see PurchaseOrderImpl
 * @see com.liferay.training.parts.model.PurchaseOrder
 * @see com.liferay.training.parts.model.PurchaseOrderModel
 * @generated
 */
public class PurchaseOrderModelImpl extends BaseModelImpl<PurchaseOrder>
	implements PurchaseOrderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a purchase order model instance should use the {@link com.liferay.training.parts.model.PurchaseOrder} interface instead.
	 */
	public static final String TABLE_NAME = "Inventory_PurchaseOrder";
	public static final Object[][] TABLE_COLUMNS = {
			{ "orderId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "partId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "orderDate", Types.TIMESTAMP },
			{ "closed", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table Inventory_PurchaseOrder (orderId LONG not null primary key,companyId LONG,groupId LONG,partId LONG,userId LONG,orderDate DATE null,closed BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table Inventory_PurchaseOrder";
	public static final String ORDER_BY_JPQL = " ORDER BY purchaseOrder.orderDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Inventory_PurchaseOrder.orderDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.training.parts.model.PurchaseOrder"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.training.parts.model.PurchaseOrder"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.training.parts.model.PurchaseOrder"));

	public PurchaseOrderModelImpl() {
	}

	public long getPrimaryKey() {
		return _orderId;
	}

	public void setPrimaryKey(long primaryKey) {
		setOrderId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_orderId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return PurchaseOrder.class;
	}

	public String getModelClassName() {
		return PurchaseOrder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("orderId", getOrderId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("partId", getPartId());
		attributes.put("userId", getUserId());
		attributes.put("orderDate", getOrderDate());
		attributes.put("closed", getClosed());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long orderId = (Long)attributes.get("orderId");

		if (orderId != null) {
			setOrderId(orderId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long partId = (Long)attributes.get("partId");

		if (partId != null) {
			setPartId(partId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date orderDate = (Date)attributes.get("orderDate");

		if (orderDate != null) {
			setOrderDate(orderDate);
		}

		Boolean closed = (Boolean)attributes.get("closed");

		if (closed != null) {
			setClosed(closed);
		}
	}

	public long getOrderId() {
		return _orderId;
	}

	public void setOrderId(long orderId) {
		_orderId = orderId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getPartId() {
		return _partId;
	}

	public void setPartId(long partId) {
		_partId = partId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public Date getOrderDate() {
		return _orderDate;
	}

	public void setOrderDate(Date orderDate) {
		_orderDate = orderDate;
	}

	public boolean getClosed() {
		return _closed;
	}

	public boolean isClosed() {
		return _closed;
	}

	public void setClosed(boolean closed) {
		_closed = closed;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PurchaseOrder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PurchaseOrder toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (PurchaseOrder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PurchaseOrderImpl purchaseOrderImpl = new PurchaseOrderImpl();

		purchaseOrderImpl.setOrderId(getOrderId());
		purchaseOrderImpl.setCompanyId(getCompanyId());
		purchaseOrderImpl.setGroupId(getGroupId());
		purchaseOrderImpl.setPartId(getPartId());
		purchaseOrderImpl.setUserId(getUserId());
		purchaseOrderImpl.setOrderDate(getOrderDate());
		purchaseOrderImpl.setClosed(getClosed());

		purchaseOrderImpl.resetOriginalValues();

		return purchaseOrderImpl;
	}

	public int compareTo(PurchaseOrder purchaseOrder) {
		int value = 0;

		value = DateUtil.compareTo(getOrderDate(), purchaseOrder.getOrderDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		PurchaseOrder purchaseOrder = null;

		try {
			purchaseOrder = (PurchaseOrder)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = purchaseOrder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PurchaseOrder> toCacheModel() {
		PurchaseOrderCacheModel purchaseOrderCacheModel = new PurchaseOrderCacheModel();

		purchaseOrderCacheModel.orderId = getOrderId();

		purchaseOrderCacheModel.companyId = getCompanyId();

		purchaseOrderCacheModel.groupId = getGroupId();

		purchaseOrderCacheModel.partId = getPartId();

		purchaseOrderCacheModel.userId = getUserId();

		Date orderDate = getOrderDate();

		if (orderDate != null) {
			purchaseOrderCacheModel.orderDate = orderDate.getTime();
		}
		else {
			purchaseOrderCacheModel.orderDate = Long.MIN_VALUE;
		}

		purchaseOrderCacheModel.closed = getClosed();

		return purchaseOrderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{orderId=");
		sb.append(getOrderId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", partId=");
		sb.append(getPartId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", orderDate=");
		sb.append(getOrderDate());
		sb.append(", closed=");
		sb.append(getClosed());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.training.parts.model.PurchaseOrder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>orderId</column-name><column-value><![CDATA[");
		sb.append(getOrderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partId</column-name><column-value><![CDATA[");
		sb.append(getPartId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderDate</column-name><column-value><![CDATA[");
		sb.append(getOrderDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>closed</column-name><column-value><![CDATA[");
		sb.append(getClosed());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PurchaseOrder.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			PurchaseOrder.class
		};
	private long _orderId;
	private long _companyId;
	private long _groupId;
	private long _partId;
	private long _userId;
	private String _userUuid;
	private Date _orderDate;
	private boolean _closed;
	private PurchaseOrder _escapedModelProxy;
}